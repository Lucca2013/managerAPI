/**
 * @copyright Sister Software
 * @license AGPL-3.0
 * @author Teffen Ellis, et al.
 */
import type { PathBuilder } from "./path-builder.js";
import type { Join } from "./type-utils.js";
/**
 * Normalize a path builder into a type-safe path builder.
 *
 * This is typical if your given path is {@linkcode PathBuilderLike}
 */
export declare function join<P1 extends string, Pn extends string[]>(pathBuilder: PathBuilder<P1>, ...pathSegmentN: Pn): Join<[P1, ...Pn], "/">;
/**
 * Create a new path builder from a string.
 */
export declare function join<P1 extends string, Pn extends string[]>(pathSegment1: P1, ...pathSegmentN: Pn): Join<[P1, ...Pn], "/">;
/**
 * Normalize a path builder or string into a type-safe path builder.
 *
 * This is typical if your given path is {@linkcode PathBuilderLike}
 */
export declare function join<P extends PathBuilder | string, Pn extends string[]>(pathBuilderLike: P, ...pathSegmentN: Pn): Join<[P extends PathBuilder<infer T> ? T : P, ...Pn], "/">;
export default join;
//# sourceMappingURL=join.d.ts.map