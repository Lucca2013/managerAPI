/**
 * @copyright Sister Software
 * @license AGPL-3.0
 * @author Teffen Ellis, et al.
 */
import { resolve as _resolve } from "node:path";
import { PathBuilder } from "./path-builder.js";
/**
 * The right-most parameter is considered {to}. Other parameters are considered an array of {from}.
 *
 * Starting from leftmost {from} parameter, resolves {to} to an absolute path.
 *
 * If {to} isn't already absolute, {from} arguments are prepended in right to left order, until an
 * absolute path is found. If after using all {from} paths still no absolute path is found, the
 * current working directory is used as well. The resulting path is normalized, and trailing slashes
 * are removed unless the path gets resolved to the root directory.
 *
 * @param pathSegment1 A sequence of paths or path segments.
 * @param pathSegmentN A sequence of paths or path segments.
 *
 * @returns An absolute path.
 * @throws {TypeError} If any of the arguments is not a string.
 */
export function resolvePathBuilder(pathSegment1, ...pathSegmentN) {
    const resolved_string = _resolve(pathSegment1?.toString() || "", ...pathSegmentN);
    return PathBuilder.from(resolved_string);
}
/**
 * Create a custom path builder resolver with a bound root.
 *
 * This is useful for creating higher-order path builders that are relative to a project root.
 *
 * @param absoluteRuntimeRoot The absolute path to the root of the project. Note that this should be
 *   an absolute path, not a relative path. If you compile your project to a different location, you
 *   should use the absolute path to the root of the compiled project.
 *
 * @returns A custom path builder resolver.
 */
export function createPathBuilderResolver(absoluteRuntimeRoot) {
    const customPathBuilderResolver = (...args) => {
        return resolvePathBuilder(absoluteRuntimeRoot, ...args.map((arg) => arg.toString()));
    };
    return customPathBuilderResolver;
}
export default resolvePathBuilder;
//# sourceMappingURL=resolve.js.map