/**
 * @copyright Sister Software
 * @license AGPL-3.0
 * @author Teffen Ellis, et al.
 */
import type { PluckBasename } from "./basename.js";
import type { PluckDirname } from "./dirname.js";
import type { Join } from "./type-utils.js";
/**
 * Type-safe path builder.
 *
 * @external URL - The URL class.
 * @template S - The type of the path string.
 */
export interface PathBuilder<S extends string> extends URL, Omit<String, keyof URL> {
    /**
     * Append additional path segments to the current path.
     */
    <T extends Array<string | number>>(...additionalPathSegments: T): PathBuilder<Join<[S, ...T], "/">>;
}
/**
 * Runtime class identifier for the PathBuilder class.
 *
 * @internal
 */
export declare const kPathBuilder: unique symbol;
/**
 * Type-safe path builder.
 */
export declare class PathBuilder<S extends string = string> extends URL implements PathBuilder<S> {
    /**
     * Runtime class identifier for the PathBuilder class.
     *
     * @internal
     */
    [kPathBuilder]: boolean;
    [Symbol.hasInstance](instance: any): boolean;
    /**
     * Directory name of a path. Similar to the Unix dirname command.
     */
    dirname(): PathBuilder<PluckDirname<S>>;
    /**
     * Base name of a path. Similar to the Unix basename command.
     */
    basename(): PathBuilder<PluckBasename<S>>;
    /**
     * Get the current path as a string.
     */
    toString(): S;
    protected constructor(path: S, base?: string | URL);
    get [Symbol.toStringTag](): S;
    get length(): number;
    [Symbol.toPrimitive](): S;
    /**
     * The port of the URL.
     */
    port: string;
    /**
     * Normalize a path builder into a type-safe path builder.
     *
     * This is typical if your given path is {@linkcode PathBuilderLike}
     */
    static from<P1 extends string, Pn extends string[]>(pathBuilder: PathBuilder<P1>, ...pathSegmentN: Pn): PathBuilder<Join<[P1, ...Pn], "/">>;
    /**
     * Create a new path builder from a string.
     */
    static from<P1 extends string, Pn extends string[]>(pathSegment1: P1, ...pathSegmentN: Pn): PathBuilder<Join<[P1, ...Pn], "/">>;
    /**
     * Normalize a path builder or string into a type-safe path builder.
     *
     * This is typical if your given path is {@linkcode PathBuilderLike}
     */
    static from<P extends PathBuilder | string, Pn extends string[]>(pathBuilderLike: P, ...pathSegmentN: Pn): PathBuilder<Join<[P extends PathBuilder<infer T> ? T : P, ...Pn], "/">>;
}
/**
 * Type-safe path builder or string.
 */
export type PathBuilderLike = string | PathBuilder;
/**
 * Unwraps a path builder or string to its core string type.
 */
export type UnwrapPathBuilder<T extends string | PathBuilder> = T extends PathBuilder<infer U> ? U : T extends string ? T : never;
export default PathBuilder;
//# sourceMappingURL=path-builder.d.ts.map